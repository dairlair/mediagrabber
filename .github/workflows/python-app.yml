name: Python application

on:
  push:
    branches:
      - master
      # branches used to test the workflow
      - "workflow-test-*"
  pull_request:
    branches: [ master ]
  release:
    types: [published, created, edited]

jobs:
  build:
    name: Build and Tests
    runs-on: ubuntu-latest
    container: dairlair/mediagrabber-base:0.2.0
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: mediagrabber
          POSTGRES_USER: mediagrabber
          POSTGRES_PASSWORD: secret
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 8s
          --health-timeout 4s
          --health-retries 6
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Apply migrations
      env:
        DSN: postgresql://mediagrabber:secret@postgres:5432/mediagrabber
      run: |
        make migrate
    - name: Test with pytest
      env:
        LOG_LEVEL: WARN
        DSN: postgresql://mediagrabber:secret@postgres:5432/mediagrabber
      run: |
        python -m pytest --cov=./ --cov-report=xml
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1

  publish-docker-release:
    name: Publish Docker Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            dairlair/mediagrabber
            ghcr.io/dairlair/mediagrabber
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
